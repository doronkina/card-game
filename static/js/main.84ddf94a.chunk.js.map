{"version":3,"sources":["components/Hand.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Hand","hand","cards","winner","winnerPairsClasses","card","i","pairs","length","className","map","key","suit","src","alt","initData","suits","handsNumber","cardsNumber","pairsProbability","App","useState","hands","setHands","setWinner","useEffect","eventPlayAgainClicked","winners","handsWithoutPairs","splice","createHand","push","determinePairs","isPotentialWinner","console","log","createCard","isUnusedCard","Math","floor","random","newCard","some","pairsList","forEach","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.84ddf94a.chunk.js","sourcesContent":["import React from 'react'\nimport { HandType, WinnerType } from '../App'\n\ntype PropsType = {\n    hand: number\n    cards: HandType\n    winner: WinnerType | null\n}\n\nconst Hand: React.FC<PropsType> = ( {hand, cards, winner} ) => {\n    const winnerPairsClasses = (card: string): string | null => {\n        if (winner && hand === winner.hand) {\n            for (let i = 0; i < winner.pairs.length; i++) {\n                if (winner.pairs[i] === card) {\n                    return `pair${i}`\n                }\n            }\n        }\n\n        return null\n    }\n\n    return (\n        <section className={`hand ${winner && hand === winner.hand && 'winning'}`}>\n            <h1>Player {hand + 1}</h1>\n            {cards.length &&\n                cards.map(card => {\n                    return (\n                        <img key={`${card.suit}${card.card}`}\n                            className={`card ${ winnerPairsClasses(card.card) }`}\n                            src={`http://h3h.net/images/cards/${card.suit}_${card.card}.svg`}\n                            alt={`${card.suit}${card.card}`}\n                        />\n                    )\n                })\n            }\n        </section>\n    )\n}\n\nexport default Hand","import React, {useState, useEffect} from 'react'\nimport Hand from './components/Hand'\nimport './App.css'\n\ntype HandsType = Array<HandType>\nexport type HandType = Array<CardType>\ntype CardType = {\n  suit: string\n  card: string\n}\n\ntype WinnersType = Array<WinnerType>\nexport type WinnerType = {\n  hand: number\n  pairs: Array<string>\n}\n\nconst initData = {\n  suits: ['spade', 'heart', 'diamond', 'club'],\n  cards: ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'],\n  handsNumber: 2,\n  cardsNumber: 5,\n  pairsProbability: 0.9\n}\n\nconst App = () => {\n  let [hands, setHands] = useState<HandsType | null>(null)\n  let [winner, setWinner] = useState<WinnerType | null>(null)\n\n  useEffect(() => {\n    if (!hands) eventPlayAgainClicked()\n  })\n\n  const eventPlayAgainClicked = (): void => {\n    const hands = []\n    const winners = []\n    let handsWithoutPairs = 0\n\n    do {\n      if (hands.length) {\n        hands.splice(0)\n        winners.splice(0)\n        handsWithoutPairs = 0\n      }\n\n      for (let i = 0; i < initData.handsNumber; i++) {\n        const hand = createHand(hands)\n        hands.push(hand)\n\n        const pairs = determinePairs(hand)\n        if (!pairs.length) {\n          handsWithoutPairs += 1\n        } else if ( isPotentialWinner(winners, pairs) ) {\n          if ( !winners[0] || winners[0].pairs.length === pairs.length ) {\n            winners.push( {hand: i, pairs} )\n          } else if (winners[0] && winners[0].pairs.length < pairs.length) {\n            winners.splice( 0, winners.length, {hand: i, pairs} )\n          }\n        }\n      }\n    } while (handsWithoutPairs / initData.handsNumber > 1 - initData.pairsProbability)\n\n    console.log(hands)\n\n    setHands(hands)\n    setWinner(winners.length === 1 ? winners[0] : null)\n  }\n\n  const createHand = (hands: HandsType): HandType => {\n    const hand = []\n\n    while (hand.length < initData.cardsNumber) {\n      const card = createCard()\n      if ( isUnusedCard(card, hand, hands) ) hand.push(card)\n    }\n\n    return hand\n  }\n\n  const createCard = (): CardType => {\n    return {\n      suit: initData.suits[ Math.floor( Math.random() * initData.suits.length ) ],\n      card: initData.cards[ Math.floor( Math.random() * initData.cards.length ) ]\n    }\n  }\n\n  const isUnusedCard = (newCard: CardType, hand: HandType, hands: HandsType): boolean => {\n    return (\n      !hand.some(card => card.suit === newCard.suit && card.card === newCard.card) && \n      (\n        !hands.length || \n        !hands.some(hand => hand.some(card => card.suit === newCard.suit && card.card === newCard.card))\n      )\n    )\n  }\n\n  const determinePairs = (hand: HandType): Array<string> => {\n    const pairs: any = {}\n    const pairsList: Array<string> = []\n\n    hand.forEach(card => {\n      if (!pairs[card.card]) {\n        pairs[card.card] = 1\n      } else {\n        delete pairs[card.card]\n        pairsList.push(card.card)\n      }\n    })\n\n    return pairsList\n  }\n\n  const isPotentialWinner = (winners: WinnersType, pairs: Array<string>): boolean => {\n    if ( !winners[0] || winners[0].pairs.length <= pairs.length ) {\n      return true\n    }\n    \n    return false\n  }\n\n  return (\n    <div>\n      {hands ? \n        hands.map((hand, i) => {\n          return <Hand key={`${hand[0].suit}${hand[0].card}`} hand={i} cards={hand} winner={winner} />\n        }) : null\n      }\n\n      <section className='buttons'>\n          <button onClick={eventPlayAgainClicked}>Play Again</button>\n      </section>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}